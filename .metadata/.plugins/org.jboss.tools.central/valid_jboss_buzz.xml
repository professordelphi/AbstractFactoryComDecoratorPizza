<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Leveraging OpenShift or Kubernetes for automated performance tests (part 1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0E-EIdl_c04/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="elasticsearch" scheme="searchisko:content:tags" /><category term="EnMasse" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Jaeger" scheme="searchisko:content:tags" /><category term="jenkins" scheme="searchisko:content:tags" /><category term="JMeter" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="opentracing" scheme="searchisko:content:tags" /><category term="performance testing" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="test automation" scheme="searchisko:content:tags" /><author><name>Frédéric Giloux</name></author><id>searchisko:content:id:jbossorg_blog-leveraging_openshift_or_kubernetes_for_automated_performance_tests_part_1</id><updated>2018-11-22T10:00:50Z</updated><published>2018-11-22T10:00:50Z</published><content type="html">&lt;p&gt;This is the first article in a series of three articles based on a session I hold at Red Hat Tech Exchange EMEA. In this first article, I present the rationale and approach for leveraging &lt;a href="https://www.openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; for automated performance testing, give an overview of the setup, and discuss points that are worth considering when executing and analyzing performance tests. I will also say a few words about performance tuning.&lt;/p&gt; &lt;p&gt;In the second article, we will look at building an observability stack, which—beyond the support it provides in production—can be leveraged during performance tests. Open sources projects like Prometheus, Jaeger, Elasticsearch and Grafana will be used for the purpose. The third article will present the details for building an environment for performance testing and automating the execution with JMeter and Jenkins.&lt;/p&gt; &lt;p&gt;&lt;span id="more-533227"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Rationale&lt;/h2&gt; &lt;p&gt;More and more companies are putting significant efforts into reducing the time it takes to bring product innovation to market or for adapting to market and regulation changes. This leads to the surge of &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservice&lt;/a&gt; architectures and &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; practices.&lt;/p&gt; &lt;p&gt;However, this brings a couple of challenges. With monthly, weekly, or daily releases, it is critical to avoid breaking things when releasing code to production. Tests are a major aspect for building confidence in the code, but they have traditionally required weeks to months of effort, which is unsustainable with the pace of releases we are now talking about. Automation is becoming critical.&lt;/p&gt; &lt;p&gt;Functional tests have historically had a fairly good level of automation through the use of unit tests that run when an application gets built. That is not the case with nonfunctional integration and performance tests. Even though this article focuses on performance aspects, the approach and setup can be reused for nonfunctional and integration aspects.&lt;/p&gt; &lt;h2 id="_setup_overview"&gt;Setup overview&lt;/h2&gt; &lt;p&gt;This figure shows an overview of the setup process:&lt;/p&gt; &lt;p id="PQALPeh"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png"&gt;&lt;img class=" aligncenter wp-image-533387 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png" alt="Overview of the setup process" width="1250" height="528" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png 1250w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-768x324.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png 1024w" sizes="(max-width: 1250px) 100vw, 1250px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id="_application_aspects"&gt;Application aspects&lt;/h3&gt; &lt;p&gt;The application I use for the demonstration is a very simple Camel route consuming messages from a queue and forwarding them to another queue. The application can be configured for injecting some load and latency, but really the interesting part is not the application itself but everything around it.&lt;/p&gt; &lt;p&gt;I decided to use asynchronous communication because that is something I see increasingly with customers who are embracing microservices and event-driven design. It is also interesting because most JMeter and OpenTracing examples and documentation are focused on synchronous calls. Bringing asynchronicity into the picture makes it slightly more complex.&lt;/p&gt; &lt;p&gt;All the application code and instructions for reproducing the setup can be found in &lt;a href="https://github.com/fgiloux/auto-perf-test"&gt;my Github repository&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Configuration externalization&lt;/h3&gt; &lt;p&gt;An important characteristic and the main benefit of container images is that they are immutable. This drastically simplifies the release process and decreases the level of risk inherent to it. Regarding tests, immutability also makes it easy to guarantee that what has been validated is what is promoted to the next environment: from integration to UAT to staging to production, for instance.&lt;/p&gt; &lt;p&gt;For this to work, it is important to externalize environment specific aspects such as the database, message broker addresses, or credentials from the application and the container image. In Kubernetes and OpenShift (Red Hat&amp;#8217;s enterprise distribution of Kubernetes), this can easily be done by using configMaps and secrets. Both work in a similar way, but secrets have additional restrictions for guaranteeing the confidentiality of sensitive information. Data in configMaps and secrets can be injected into a running &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; either as environment variables or as files mounted into the container file system.&lt;/p&gt; &lt;p&gt;But what about application tuning parameters? By that, I mean things like the number of message consumers, the size of connection pools, etc. These parameters can have a big impact on the behavior of the application in production, which speaks for having them buried in the immutable container image. Remember: we want to promote exactly what we have tested. On the other hand, not being able to modify them during the performance tests (we would need to re-create the image) may slow down or reduce the breadth of the tests that can be run in a period of time.&lt;/p&gt; &lt;p&gt;I see two options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first option is to comply with the immutable principle and to have the tuning parameters be part of the image. This would need to be supported by a more complex &lt;a href="https://developers.redhat.com/blog/category/ci-cd/"&gt;continuous integration&lt;/a&gt; pipeline. This pipeline would create several images with different tuning parameters.&lt;/li&gt; &lt;li&gt;The second option is more pragmatic. It consists of externalizing these parameters into configMaps as well. To mitigate the risk of releasing something different from what has been tested, the source of the configMaps should be recorded into a version control system such as git or a CMDB and tagged for each release. I recommend not to have these files directly with the code. Having them in a different repository helps with &amp;#8220;promoting&amp;#8221; the configuration in a similar way as we would promote our code without the need to create a new code release when only the configuration has changed. Having separate repositories for each environment (integration, UAT, production) allows us to have a clear picture of what version is running in each environment and to easily promote the code from one to another.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="_observability"&gt;Observability&lt;/h3&gt; &lt;p id="vgrENfs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png"&gt;&lt;img class=" aligncenter wp-image-533377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png" alt="Elasticsearch logo" width="280" height="233" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Running automated performance tests is a great thing, but for them to bring their full value we need to understand how the application behaves when put under load. Leveraging the observability features built for production readiness is a straightforward way of getting this insight: identifying bottlenecks, error states, resource consumption under load, etc. There are three pillars can be used for that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Application metrics, which can be collected through JMX/Jolokia or Prometheus endpoints for instance&lt;/li&gt; &lt;li&gt;Application traces/performance, which can be captured thanks to OpenTracing and Jaeger&lt;/li&gt; &lt;li&gt;Logs, which with OpenShift automatically are aggregated into Elasticsearch and made available for querying and reporting in Kibana when the application writes them to the standard output&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I have also used with some success commercial products covering the first two points. However, as open source projects, Prometheus and Jaeger have the advantage of getting ideas, innovation, and commitment from more than a single company.&lt;/p&gt; &lt;p&gt;We will take a closer look at the setup of the observability layer in my second article.&lt;/p&gt; &lt;h3 id="_broker_and_external_services"&gt;Broker and external services&lt;/h3&gt; &lt;p id="HavRawH"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png"&gt;&lt;img class=" aligncenter wp-image-533347 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png" alt="EnMasse logo" width="231" height="55" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png 1000w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419-768x184.png 768w" sizes="(max-width: 231px) 100vw, 231px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Applications rely on an infrastructure to fulfill usual functions such as message brokering here. Load balancing or state persistence are other examples. The challenge introduced by these systems is that they are often shared. The results of performance tests may hence be influenced by external factors. File system reads and writes and network communication may also be influenced. There are, however, a few mitigation strategies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We can monitor our infrastructure to see how much load it is handling besides the load created by the application tests and we can identify whether there is contention.&lt;/li&gt; &lt;li&gt;The good thing with automated tests is that we can schedule them at a later point in time and select a time when traffic external to the application is minimal.&lt;/li&gt; &lt;li&gt;We can use infrastructure, which provides good isolation.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Regarding this last point, I like the approach taken by the message broker used in this demo. EnMasse, created with OpenShift in mind from day one, can spawn a new, dedicated broker on demand. We can have it provisioned for the test run and decommissioned afterward. No other application is using the broker, which provides isolation and the decommissioning after test runs ensures minimal resources reservation. Monitoring the broker will also provide confidence that it is not a limiting factor with respect to performance under load.&lt;/p&gt; &lt;h3 id="_test_automation"&gt;Test automation&lt;/h3&gt; &lt;p&gt;For test automation, I am relying on two tools:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JMeter for load creation&lt;/li&gt; &lt;li&gt;Jenkins for the orchestration&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both tools can leverage OpenShift and run as containers on it. I will demonstrate how this can be done in my third article.&lt;/p&gt; &lt;h3 id="_jmeter"&gt;JMeter&lt;/h3&gt; &lt;p id="rnfPuEO"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png"&gt;&lt;img class=" aligncenter wp-image-533337 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png" alt="JMeter logo" width="179" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png 521w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f-300x102.png 300w" sizes="(max-width: 179px) 100vw, 179px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Many tools are available for supporting test automation, such as JMeter, Gatling, Locust, Grinder, and Tsung. They provide a robust, scalable, and flexible way to produce test loads. Message templates, test data sets, or load injection patterns can easily be configured. An aspect that I like in JMeter is the possibility to design and experiment tests using its UI and let them run afterward from the command line, which is a must for scheduled tests with higher load. The UI also helps when we need to interact with less-technical staff in the design phase or have them change and refine the test cases once the technical aspects have been settled.&lt;/p&gt; &lt;p&gt;Similar to what has been said for the application, it is advantageous to externalize test parameters (the number of messages, injection rate, duration, etc.) so that different test cases can be run one after the other without human intervention or replicating the test code.&lt;/p&gt; &lt;p&gt;Running JMeter as a container makes its setup easily portable and disposable. OpenShift also allows you to control the resources that are allocated to JMeter and the application and it provides access to a larger resource pool. When the tests are finished, both can be disposed of.&lt;/p&gt; &lt;p&gt;Observability is also relevant for JMeter to make sure that it is not under resource constraints nor is it a limiting factor for performing the tests; shortly stated, it ensures that the thermometer is not broken. Another aspect is that it also helps with measuring performance at boundaries. When you use OpenTracing, it is not enough to know how long the application took to process a message; it is also important to know how long the message waited in the queue before being picked up. Instrumenting JMeter can provide a better approximation of that.&lt;/p&gt; &lt;h3 id="_jenkins"&gt;Jenkins&lt;/h3&gt; &lt;p id="BMGgxbC"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png"&gt;&lt;img class=" aligncenter wp-image-533327 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png" alt="Jenkins logo" width="180" height="180" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png 550w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69-300x300.png 300w" sizes="(max-width: 180px) 100vw, 180px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For running automated tests it is best to have a conductor. That is what Jenkins is. It will automate&lt;/p&gt; &lt;ul&gt; &lt;li&gt;builds&lt;/li&gt; &lt;li&gt;provisioning of the environment&lt;/li&gt; &lt;li&gt;deployments&lt;/li&gt; &lt;li&gt;the triggering of test execution with various configurations&lt;/li&gt; &lt;li&gt;cleansing/decommissioning&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It may also provide a high-level view of the test results: pass or fail. It also integrates nicely with JMeter to have a quick view of trends. By adding the capability to build from scratch and decommission at the end of the tests, Jenkins provides confidence that what is tested is what was intended and tracked in the version control system.&lt;/p&gt; &lt;p&gt;Jenkins allows us to have the tests run on schedule and/or, for instance, every time a change is committed to the trunk. It is the tool of choice for continuous integration and continuous delivery. It provides the necessary functions for making performance tests a part of automated nonregression testing.&lt;/p&gt; &lt;h2 id="_considerations"&gt;Considerations&lt;/h2&gt; &lt;p&gt;Be aware of the following considerations.&lt;/p&gt; &lt;h3 id="_avoiding_waisting_resources"&gt;Avoiding wasting resources&lt;/h3&gt; &lt;p&gt;Performance tests often require a significant amount of resources because it is best to run the tests in an environment that replicates production. By leveraging OpenShift and Jenkins pipelines, it is possible to create in minutes an environment for the time the tests are run and to decommission it right after. By doing that, we don’t need to mobilize the resources for longer than required, which may mean significant savings in energy and costs.&lt;/p&gt; &lt;h3 id="_repeatability"&gt;Repeatability&lt;/h3&gt; &lt;p&gt;Being able to see the impact of code or configuration changes on performance allows us to understand the trade-offs made by a design or an implementation decision and to react quickly when we don’t feel comfortable with the implications. The delete and re-create approach offers a clean starting point for comparing apples to apples between runs. Moreover, it provides confidence that what is being tested is also what is available and tagged in repositories (code source, configuration, and container registry).&lt;/p&gt; &lt;p&gt;With a highly dynamic platform such as OpenShift, it is important to make sure that the same amount of resources can get mobilized during runs in order to be able to compare them. Therefore, we need to configure the deployments with CPU/memory requests that are equal to the CPU/memory limits. We don’t want to allow any fluctuation of resources based on the load (by other applications) of the nodes where the component instances are running. This differs to what we may have in production where we may want to mobilize as many resources as available.&lt;/p&gt; &lt;p&gt;In a similar way, it is important to limit contention at the broker level, network, or file system, as stated earlier. It is best to monitor the broker, I/O, and NIO during the tests.&lt;/p&gt; &lt;h3 id="_data_set"&gt;Data set&lt;/h3&gt; &lt;p&gt;Latency and throughput are often significantly affected by the data being processed. It is important to have a data set representative of the data in production that can be reused between runs. As to the difference in functional testing, it is not only necessary to account for the diversity of production data but also for the occurrences of specific data sets. It is best to use a real production data set that may have been anonymized if the data is sensitive.&lt;/p&gt; &lt;p&gt;In this respect, Kafka is very interesting with its &amp;#8220;replay&amp;#8221; capability. Its use would, however, require a very different architectural design and test approach, which are out of scope for this article.&lt;/p&gt; &lt;h3 id="_injection_pattern"&gt;Injection pattern&lt;/h3&gt; &lt;p id="aQxuJcE"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png"&gt;&lt;img class=" aligncenter wp-image-533317 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188-685x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png" alt="Graphic depicting the need to be aware of the injection pattern" width="148" height="221" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png 685w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188-201x300.png 201w" sizes="(max-width: 148px) 100vw, 148px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It is important to know the injection pattern of data in production for creating significant test cases because latency and, to some extent, throughput are affected by it. Is our application processing a batch or streams of messages? Are there strong variations during a day, a minute, or a second? 1.8 million messages per hour is not the same as 30,000 messages per minute or 500 per second. A uniform distribution is not granted. I have seen systems that were performing quite well with 1.8 million messages per hour uniformly distributed, but the SLA was missed for 90% of the messages in real life due to batch injection. It only took 20 minutes to inject the messages and this was happening every hour.&lt;/p&gt; &lt;p&gt;In the opposite way, another system was performing poorly under tests. About 80 messages were injected every second, as fast as the mock component could do. Distributing the messages evenly over the second 90% of the messages met the targeted SLA. This is, by the way, configurable in JMeter.&lt;/p&gt; &lt;p&gt;In case of a greenfield application, assumptions on the injection rate will need to be made and revisited as soon as some experience has been gathered in production.&lt;/p&gt; &lt;h3 id="_measurement_points"&gt;Measurement points&lt;/h3&gt; &lt;p&gt;The following graphics depict how a component is coping with the load. The first shows a component that is coping with the load; the second shows a component that is not coping with the load.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png"&gt;&lt;img class=" aligncenter wp-image-533267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png" alt="Graphic of a component that is coping with the load" width="411" height="185" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png 411w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d-300x135.png 300w" sizes="(max-width: 411px) 100vw, 411px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png"&gt;&lt;img class=" aligncenter wp-image-533277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png" alt="Graphic of a component that is not coping with the load" width="474" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png 474w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f-300x116.png 300w" sizes="(max-width: 474px) 100vw, 474px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To get the real picture of how an application is performing, it is important to pay attention to the measurement points. When you are looking at applications using brokerage, the time the message is enqueued is more relevant than the time it is dequeued by the customer (also, both provide valuable information). When the component is not able to cope with the load, the time spent by messages waiting to be processed is affected the most. The above diagrams provide an idea: look for a usual pattern of how the time spent in &amp;#8220;enqueued&amp;#8221; and &amp;#8220;read and processing&amp;#8221; evolve when components get overwhelmed.&lt;/p&gt; &lt;p&gt;There is also quite a lot of confusion on memory consumption with Java applications. The heap size and its utilization ratio is just part of the picture. Metaspace, thread stacks (the default setting may be up to &lt;a href="https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp1024112"&gt;1MB per thread&lt;/a&gt;), may also take a significant part. On top of that, comes the memory utilized at the system level for opened files/sockets, for instance. The memory used at the system level is not that easy to account for due to the way the operating system optimizes its use with sharing and caching. When the application runs inside a container on OpenShift, the values reported by cgroups are the ones to monitor.&lt;/p&gt; &lt;h3 id="_coordinated_omission"&gt;Coordinated omission&lt;/h3&gt; &lt;p&gt;The idea with coordinated omission is that the response time of the system under test may affect the measurement. JMeter is configured with a limited number of threads and also has limited resources. If the call to send messages is blocked for a longer period of time, which also means high latency, that may also prevent JMeter from sending the targeted number of messages during the interval; hence, it will result in getting fewer measurements when the system behaves badly. This would distort the latency percentile and average values that are calculated. This demo aims at validating application (not broker) performance/behavior. There is also the possibility to publish asynchronously and, hence, nonblocking. With this in mind, I can make the following assumptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JMeter is able to produce the load requested (thanks to the scalability provided by OpenShift)&lt;/li&gt; &lt;li&gt;The broker is able to ingest the messages in a timely fashion (not blocking JMeter)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Interesting resources on coordinated omission and latency measurements are available &lt;a href="http://highscalability.com/blog/2015/10/5/your-load-generator-is-probably-lying-to-you-take-the-red-pi.html"&gt;here&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=lJ8ydIuPFeU"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="_performance_tuning"&gt;Performance tuning&lt;/h2&gt; &lt;p&gt;When reporting on test results, it is handy to have two levels. A simplistic one, which only tells whether the test passed or failed with a high-level view of trends, and a second level, which can leverage the observability and provides valuable information for troubleshooting performance issues or degradation. It is critical to see in a few minutes how the application has performed during tests. If it takes too long for the analysis, the team won’t look at the results on a regular basis. When we talk about performance, we usually look at three aspects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Throughput&lt;/li&gt; &lt;li&gt;Latency&lt;/li&gt; &lt;li&gt;Resource (RAM, CPU, etc.) consumption&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Application stages&lt;/h3&gt; &lt;p id="IlOKldo"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png"&gt;&lt;img class=" aligncenter wp-image-533257 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-1024x774.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png" alt="A graphic of a question mark" width="141" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png 1707w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-300x227.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-768x581.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-1024x774.png 1024w" sizes="(max-width: 141px) 100vw, 141px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Looking at performance tuning, it is important to understand and decide on what we want to optimize and what we are ready to compromise on. Besides performance versus resource consumption, the application may behave differently during the following phases depending on the choices that have been made:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Startup&lt;/li&gt; &lt;li&gt;Initialization&lt;/li&gt; &lt;li&gt;Steady state&lt;/li&gt; &lt;li&gt;Peak load&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In the past, tuning has usually been done for peak load, the time when the application is most challenged to meet its SLA. Startup and initialization were rare events. Moving to disposable containers, the choice may not be that clear anymore. Considering auto-scaling, cluster rebalancing containers may get stopped and started more frequently. Being able to auto-scale does not help if our application instance needs minutes to start and we have to respond to the load created by the start of a batch producing thousand of messages per seconds. Also, the first messages processed after startup may have a higher latency during the warmup phase (JIT compilation and optimization, pool loading, etc.).&lt;/p&gt; &lt;p&gt;When conducting tests, warming up the application is something that we may want to consider.&lt;/p&gt; &lt;p&gt;In term of tuning, there are several decisions and trade-offs to be made, which will impact throughput and latency at different phases and startup time:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Should all libraries be loaded during startup?&lt;/li&gt; &lt;li&gt;Should connection and other pools be fully populated during startup?&lt;/li&gt; &lt;li&gt;Would SubstrateVM and AOT compilation (reducing startup time and memory consumption at the cost of lower throughput) become an option?&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="_hints"&gt;Tuning hints&lt;/h3&gt; &lt;p id="hzOjFwt"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png"&gt;&lt;img class=" aligncenter wp-image-533247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-1024x249.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png" alt="Graphic of several screws, where all but one are the same" width="296" height="72" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png 2000w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-300x73.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-768x187.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-1024x249.png 1024w" sizes="(max-width: 296px) 100vw, 296px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There are a few screws that can be adjusted to improve performance. Here is a non-exhaustive list for the application type described in this article:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Message ordering: Guaranteeing message ordering prevents parallelism or requires reordering, which usually has a big impact on performance. It should be done only when it is strictly required. It is often worth investigating where it can be relaxed for part of the processing.&lt;/li&gt; &lt;li&gt;Prefetch strategy: Prefetch is a very useful optimization for throughput. It prevents the application threads from waiting for the message to be fetched from the broker over the network before the message can get processed. With nonexclusive consumers we should, however, pay attention that one instance does not starve the pool of waiting messages; otherwise, we may end up with the funny pattern where instance 1 consumes and process up to, let&amp;#8217;s say, 50 messages (the prefetch size) when instance 2 does nothing followed by instance 2 consuming and processing 50 messages while instance 1 does nothing, and so on.&lt;/li&gt; &lt;li&gt;Threads contention: If we have a multi-threaded application, we need to pay attention to the amount of time the threads spend in blocked or waiting states.&lt;/li&gt; &lt;li&gt;Context-switching: More threads does not mean better throughput. The time spent in context switching may significantly impact performance. We need to be in control of the number of threads created by our application.&lt;/li&gt; &lt;li&gt;Pools, memory retention, and garbage collection: This is a large topic and I can recommend &lt;a href="https://developers.redhat.com/blog/2014/07/15/dude-wheres-my-paas-memory-tuning-javas-footprint-in-openshift-part-1/"&gt;this article&lt;/a&gt;. It should also be noted that changes related to the points previously mentioned may affect any tuning made on garbage collection.&lt;/li&gt; &lt;li&gt;I/O and file system: For several good reasons, a container usually writes to network storage rather than to the local file system. This may introduce additional latency. Asynchronous writes and caching may, for instance, be considered for mitigating the impact.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thanks for reading this article. I hope you found this first part interesting. The second part will present how observability can easily be built using very successful open source projects. The third and last part will deep dive into test automation and orchestration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#038;title=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" data-a2a-url="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/" data-a2a-title="Leveraging OpenShift or Kubernetes for automated performance tests (part 1)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 1)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0E-EIdl_c04" height="1" width="1" alt=""/&gt;</content><summary>This is the first article in a series of three articles based on a session I hold at Red Hat Tech Exchange EMEA. In this first article, I present the rationale and approach for leveraging Red Hat OpenShift or Kubernetes for automated performance testing, give an overview of the setup, and discuss points that are worth considering when executing and analyzing performance tests. I will also say a fe...</summary><dc:creator>Frédéric Giloux</dc:creator><dc:date>2018-11-22T10:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/</feedburner:origLink></entry><entry><title>Maintenance release for Hibernate Search 5.10</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fCSARrJAUEQ/" /><category term="elasticsearch" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="hibernate search" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Yoann Rodière</name></author><id>searchisko:content:id:jbossorg_blog-maintenance_release_for_hibernate_search_5_10</id><updated>2018-11-22T09:10:35Z</updated><published>2018-11-22T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just published Hibernate Search 5.10.5.Final, a bugfix release for the 5.10 branch.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net//browse/HSEARCH-3407"&gt;HSEARCH-3407&lt;/a&gt;: When using the Elasticsearch integration, multi-valued boolean fields used to only take the very first value into account. This is no longer the case, all values are properly indexed.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The other changes are mainly related to our build process.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For a full list of changes since the previous releases, please see the &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10061&amp;amp;version=31717"&gt;release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="how-to-get-these-releases"&gt;&lt;a class="anchor" href="#how-to-get-these-releases"&gt;&lt;/a&gt;How to get these releases&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on the &lt;a href="http://hibernate.org/search/releases/5.10/#get-it"&gt;dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the following channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-search"&gt;hibernate-search tag on Stackoverflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-search"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fCSARrJAUEQ" height="1" width="1" alt=""/&gt;</content><summary>We just published Hibernate Search 5.10.5.Final, a bugfix release for the 5.10 branch. What’s new? HSEARCH-3407: When using the Elasticsearch integration, multi-valued boolean fields used to only take the very first value into account. This is no longer the case, all values are properly indexed. The other changes are mainly related to our build process. For a full list of changes since the previou...</summary><dc:creator>Yoann Rodière</dc:creator><dc:date>2018-11-22T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/11/22/hibernate-search-5-10-5-Final/</feedburner:origLink></entry><entry><title>Eclipse MicroProfile for Spring Boot developers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/evapNolpjCg/" /><category term="CDI" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="thorntail" scheme="searchisko:content:tags" /><category term="wildfly swarm" scheme="searchisko:content:tags" /><author><name>Michal Szynkiewicz</name></author><id>searchisko:content:id:jbossorg_blog-eclipse_microprofile_for_spring_boot_developers</id><updated>2018-11-21T13:00:47Z</updated><published>2018-11-21T13:00:47Z</published><content type="html">&lt;p&gt;By now you have probably heard of &lt;a href="http://microprofile.io/"&gt;Eclipse MicroProfile&lt;/a&gt; (MP). It is a community-driven initiative to define specifications for enterprise Java &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. MicroProfile is only two years old, yet it has delivered eight innovative specifications and is evolving fast. It provides metrics, API documentation, health checks, fault tolerance, distributed tracing, and more. With it, you can take full advantage of cutting-edge cloud-native technologies and do it in a vendor-neutral fashion!&lt;/p&gt; &lt;p&gt;For developers familiar with Spring Boot, we have prepared this article, which compares the basics of developing applications with Spring Boot and with MicroProfile. We wrote two applications, one with each solution. In this article, we will go through the differences between them. You can find the source code for both projects on &lt;a href="https://github.com/michalszynkiewicz/from-spring-to-microprofile"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For the MicroProfile application, we use &lt;a href="https://developers.redhat.com/blog/2018/10/17/announcing-thorntail-2-2-general-availability/"&gt;Thorntail&lt;/a&gt; (formerly know as Wildfly Swarm), but except for the setting up part, Open Liberty, Payara, TomEE, or any other implementation would look exactly the same.&lt;/p&gt; &lt;p&gt;Throughout this article, we assume you know Spring Boot and we focus on what is different in MicroProfile.&lt;/p&gt; &lt;p&gt;&lt;span id="more-536277"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Setting up the project&lt;/h2&gt; &lt;p&gt;We set up both applications using Maven.&lt;/p&gt; &lt;p&gt;With Thorntail, the setup of a project is quite similar to Spring Boot. The first difference is in the project packaging. While we use &lt;code&gt;jar&lt;/code&gt; (the default packaging) for a Spring Boot app, we need to set it to &lt;code&gt;war&lt;/code&gt; to package a Thorntail application.&lt;/p&gt; &lt;p&gt;Our Spring Boot application uses a BOM file called &lt;code&gt;spring-boot-dependencies&lt;/code&gt;. Thorntail provides BOM files too. We selected &lt;code&gt;bom&lt;/code&gt;, which lists all stable, well-tested Thorntail elements. If you like to experiment, you can use &lt;code&gt;bom-all&lt;/code&gt; instead, for example.&lt;/p&gt; &lt;p&gt;Both Spring Boot and Thorntail use a Maven plugin to package user&amp;#8217;s classes, resources, and all the bits of the selected solution into a fat JAR. For Thorntail, the plugin is called &lt;code&gt;thorntail-maven-plugin&lt;/code&gt;. The listing below shows its declaration together with the declaration of the Thorntail BOM.&lt;/p&gt; &lt;pre&gt;&amp;#60;project ...&amp;#62; ... &amp;#60;packaging&amp;#62;war&amp;#60;/packaging&amp;#62; &amp;#60;dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.thorntail&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;bom&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${version.thorntail}&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;/dependencies&amp;#62; &amp;#60;/dependencyManagement&amp;#62; ... &amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;io.thorntail&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;thorntail-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${version.thorntail}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;package&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &lt;/pre&gt; &lt;p&gt;Having defined the basics, we can select the features we need.&lt;/p&gt; &lt;p&gt;While for Spring Boot we chose &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, we simply add a dependency on &lt;code&gt;microprofile&lt;/code&gt;for Thorntail.&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.thorntail&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;microprofile&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;You can take a look at the final &lt;code&gt;pom.xml&lt;/code&gt; file &lt;a href="https://github.com/michalszynkiewicz/from-spring-to-microprofile/blob/master/microprofile/pom.xml"&gt;in the GitHub project&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There is one more difference in setting up the project: the place where the static resources should be put. Our Spring Boot application keeps static resources in the &lt;code&gt;src/main/resources/static&lt;/code&gt; directory, while the Thorntail application requires them to be placed in &lt;code&gt;src/main/webapp&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Exposing a REST endpoint&lt;/h2&gt; &lt;p&gt;The most idiomatic way to expose a REST API from a Spring application is by using Spring MVC. MicroProfile leverages JAX-RS for that purpose.&lt;br /&gt; The translation from one to another is quite straightforward. Both work on annotations.&lt;/p&gt; &lt;p&gt;First, for JAX-RS, an &lt;code&gt;Application&lt;/code&gt; class is required. It extends &lt;code&gt;javax.ws.rs.core.Application&lt;/code&gt; and can provide a global path prefix for all JAX-RS endpoints. In our case it is:&lt;/p&gt; &lt;pre&gt;@ApplicationPath("/api") public class ApplicationConfig extends Application { } &lt;/pre&gt; &lt;p&gt;Then it’s just a matter of translating the resource classes annotations.&lt;/p&gt; &lt;p&gt;The following Spring MVC code:&lt;/p&gt; &lt;pre&gt;@RestController @RequestMapping(value = "/api/greeting", produces = MediaType.APPLICATION_JSON_VALUE) public class GreetingController { @GetMapping public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) { ... } &lt;/pre&gt; &lt;p&gt;translates to the following MicroProfile code:&lt;/p&gt; &lt;pre&gt;@Path("/greeting") // 1 @Produces(MediaType.APPLICATION_JSON) // 2 public class GreetingResource { @GET // 3 public Response greeting(@QueryParam("name") @DefaultValue("World") String name) { // 4 ... } &lt;/pre&gt; &lt;p&gt;To break it down:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The JAX-RS endpoint class should be annotated with &lt;code&gt;@Path&lt;/code&gt;. This annotation is also the place to provide any prefix for the endpoint.&lt;/li&gt; &lt;li&gt;A separate annotation, &lt;code&gt;@Produces&lt;/code&gt;, has to be used if we want to specify the content type of the responses. It has a counterpart named &lt;code&gt;@Consumes&lt;/code&gt; to specify accepted request entity types.&lt;/li&gt; &lt;li&gt;In addition, the methods that are meant to handle the requests need to be annotated with &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;, &lt;code&gt;@DELETE&lt;/code&gt;, &lt;code&gt;@PUT&lt;/code&gt;, or &lt;code&gt;@HEAD&lt;/code&gt;, depending on the HTTP method they are meant to handle.&lt;/li&gt; &lt;li&gt;Our endpoint uses a query parameter. To make it work, we used a &lt;code&gt;@RequestParam&lt;/code&gt; annotation in Spring MVC. For MicroProfile, the annotation to use is &lt;code&gt;@QueryParam&lt;/code&gt;. To provide a default value, we added a &lt;code&gt;@DefaultValue&lt;/code&gt; annotation.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;See the &lt;code&gt;javax.ws.rs&lt;/code&gt; package for other available annotations.&lt;/p&gt; &lt;p&gt;It is important to also mention the &lt;code&gt;@Context&lt;/code&gt; annotation. With it, you can inject values such as HTTP headers or security context to methods or endpoints.&lt;/p&gt; &lt;h2&gt;Dependency injection&lt;/h2&gt; &lt;p&gt;The core of Spring is its dependency injection. With MicroProfile, you can use CDI instead.&lt;/p&gt; &lt;p&gt;That mainly means using &lt;code&gt;@Inject&lt;/code&gt; annotation instead of Spring’s &lt;code&gt;@Autowired&lt;/code&gt; annotation:&lt;/p&gt; &lt;pre&gt; @Inject private GreetingGenerator generator; &lt;/pre&gt; &lt;p&gt;Similarly to Spring, CDI has a concept of beans and these beans live in a certain scope. The &lt;code&gt;@Scope&lt;/code&gt; annotation that is used to control the scope for Spring beans translates to one of the &lt;code&gt;@ApplicationScoped&lt;/code&gt;, &lt;code&gt;@RequestScoped&lt;/code&gt;, etc. CDI annotations.&lt;/p&gt; &lt;p&gt;Here’s an example from the &lt;code&gt;GreetingGenerator&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt;@ApplicationScoped public class GreetingGenerator { … } &lt;/pre&gt; &lt;p&gt;Check out the &lt;code&gt;javax.enterprise.context&lt;/code&gt; package for the list of all available options.&lt;/p&gt; &lt;p&gt;The translation is quite straightforward. The only catch is the fact that the default scope is different. While in Spring, the default scope is &lt;em&gt;singleton&lt;/em&gt;, in CDI it is &lt;code&gt;@Dependent&lt;/code&gt;—a scope corresponding to Spring’s &lt;em&gt;prototype&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Configuration&lt;/h2&gt; &lt;p&gt;In our Spring application, we inject configuration values with the &lt;code&gt;@Value&lt;/code&gt; annotation.&lt;/p&gt; &lt;p&gt;With MicroProfile Config, we achieve the same with the following:&lt;/p&gt; &lt;pre&gt;@Inject @ConfigProperty(name = "greeting.message") private String message; &lt;/pre&gt; &lt;p&gt;The value for the message field above will be taken from &lt;code&gt;META-INF/microprofile-config.properties&lt;/code&gt;. It can be overwritten by an environment variable or a system property. MicroProfile Config also provides an easy mechanism to define a custom &lt;code&gt;ConfigSource&lt;/code&gt;, an additional source of configuration values.&lt;/p&gt; &lt;h2&gt;Execution&lt;/h2&gt; &lt;p&gt;Let’s try it all out!&lt;/p&gt; &lt;p&gt;To get the code, clone the GitHub repository:&lt;/p&gt; &lt;pre&gt;git clone https://github.com/michalszynkiewicz/from-spring-to-microprofile/ &lt;/pre&gt; &lt;p&gt;The repository contains two projects in two separate directories. To build any of them, navigate to the appropriate directory and run the following:&lt;/p&gt; &lt;pre&gt;mvn clean package &lt;/pre&gt; &lt;p&gt;Both Spring Boot and Thorntail generate an uber-JAR. To run the Thorntail one, go into the target directory and execute this:&lt;/p&gt; &lt;pre&gt;java -jar microprofile-from-spring-1.0-SNAPSHOT-thorntail.jar &lt;/pre&gt; &lt;p&gt;Now, when you go to http://localhost:8080 in your browser, you should be presented with a web page exposed by the selected application. You can try out the application through the browser or access the REST API directly at http://localhost:8080/api/greeting?name=&lt;em&gt;put-your-name-here&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;More than a counterpart&lt;/h2&gt; &lt;p&gt;While the code for both example applications is quite similar, the MicroProfile one has a couple more pieces of functionality.&lt;/p&gt; &lt;p&gt;As configured, the MicroProfile application additionally exposes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;OpenAPI documentation for the REST endpoint, on http://localhost:8080/openapi&lt;/li&gt; &lt;li&gt;Application metrics, including thread count, heap usage, etc. on http://localhost:8080/metrics&lt;/li&gt; &lt;li&gt;Health checks, ready to use with Kubernetes, on http://localhost:8080/healthcheck&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Moreover, without modifying the configuration, it can make use of other MicroProfile specifications, such as Fault Tolerance or a type-safe REST client.&lt;/p&gt; &lt;h2&gt;Further reading&lt;/h2&gt; &lt;p&gt;If you would like to learn more, you can download a free ebook: &lt;em&gt;&lt;a href="http://bit.ly/MP-ebook"&gt;Building Microservices with Enterprise Java: A Practical Guide to Eclipse MicroProfile&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Thorntail and Eclipse Microprofile resources:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;James Falkner&amp;#8217;s article &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/17/announcing-thorntail-2-2-general-availability/"&gt;Announcing Thorntail 2.2 General Availability&lt;/a&gt; &lt;/em&gt;provides an overview of Thorntail, and how you can get started, including trying it in an online environment, no download required.&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/07/microprofile-status-version-1-3/"&gt;&lt;em&gt;Eclipse MicroProfile Status in version 1.3&lt;/em&gt;&lt;/a&gt; provides an overview of the API specifications in MicroProfile&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/01/29/microprofile-1-2-cloud-native-development/"&gt;&lt;em&gt;Cloud-native development with Eclipse Microprofile 1.2&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Thorntail project website: &lt;a href="https://thorntail.io/"&gt;thorntail.io&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#38;linkname=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F21%2Feclipse-microprofile-for-spring-boot-developers%2F&amp;#038;title=Eclipse%20MicroProfile%20for%20Spring%20Boot%20developers" data-a2a-url="https://developers.redhat.com/blog/2018/11/21/eclipse-microprofile-for-spring-boot-developers/" data-a2a-title="Eclipse MicroProfile for Spring Boot developers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/21/eclipse-microprofile-for-spring-boot-developers/"&gt;Eclipse MicroProfile for Spring Boot developers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/evapNolpjCg" height="1" width="1" alt=""/&gt;</content><summary>By now you have probably heard of Eclipse MicroProfile (MP). It is a community-driven initiative to define specifications for enterprise Java microservices. MicroProfile is only two years old, yet it has delivered eight innovative specifications and is evolving fast. It provides metrics, API documentation, health checks, fault tolerance, distributed tracing, and more. With it, you can take full ad...</summary><dc:creator>Michal Szynkiewicz</dc:creator><dc:date>2018-11-21T13:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/21/eclipse-microprofile-for-spring-boot-developers/</feedburner:origLink></entry><entry><title>Byteman 4.0.5 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fEHPOhCj3sY/byteman-405-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_5_has_been_released</id><updated>2018-11-21T10:18:00Z</updated><published>2018-11-21T10:18:00Z</published><content type="html">Byteman 4.0.5 is now available from the &lt;a href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest update release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.5 updates the 4.0.4 release to ensure that it works&amp;nbsp; correctly on the latest jdk12 releases. Specifically, it ensures that Byteman is able to process class files with a JDK12 class file version (the previous release would run on jdk12 but could only classes whose bytecode file version was for jdk11 or lower.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.5 also fixes a small bug which broke access to non-public members of classes when loaded via a JBoss Modules class loader.&lt;br /&gt;&lt;br /&gt;More details can be found in the &lt;a href="http://downloads.jboss.org/byteman/latest/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fEHPOhCj3sY" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.5 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest update release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.5 updates the 4.0.4 release to ensure that it works  correctly on the latest jdk12 releases. Specifically, it ensures that Byteman is able to process cl...</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2018-11-21T10:18:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2018/11/byteman-405-has-been-released.html</feedburner:origLink></entry><entry><title>The road to Infinispan 10 (Alpha1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wa1CDVCseoA/the-road-to-infinispan-10-alpha1.html" /><category term="alpha" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="final" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-the_road_to_infinispan_10_alpha1</id><updated>2018-11-21T08:57:52Z</updated><published>2018-11-21T08:57:00Z</published><content type="html">Dear all,&lt;br /&gt;&lt;br /&gt;Today we are releasing 10.0.0.Alpha1 and 9.4.2.Final.&lt;br /&gt;&lt;br /&gt;Infinispan 9.4.2.Final comes with a number of bug fixes and some small additional features:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9655" target="_blank"&gt;ISPN-9655&lt;/a&gt; REST Access Log headers&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-8144" target="_blank"&gt;ISPN-8144&lt;/a&gt; &amp;amp; &lt;a href="https://issues.jboss.org/browse/ISPN-9661" target="_blank"&gt;ISPN-9661&lt;/a&gt; Cross-Site replication statistics&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9708" target="_blank"&gt;ISPN-9708&lt;/a&gt; Expose the executor services through JMX&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9732" target="_blank"&gt;ISPN-9732&lt;/a&gt; Local iteration optimization with write behind is valid for non shared stores&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9717" target="_blank"&gt;ISPN-9717&lt;/a&gt; Fix Integer overflow for lifespan and maxIdle&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;We have begun working on what will become Infinispan 10. As with all new major releases, this will come with a number of important changes.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;New Server&lt;/b&gt;&lt;br /&gt;We are working on a new lightweight server, currently dubbed &lt;i&gt;ServerNG&lt;/i&gt;, which will supersede the current WildFly-based offering. The new server will have a smaller disk and memory footprint, a new RESTful admin interface, improved security. It will still use familiar components (Elytron for security, Narayana for transactions, etc) but we hope that the installation and usability experience will be most improved. A dedicated blog post will describe in detail what is coming.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Long-term Storage Format&lt;/b&gt;&lt;br /&gt;The persistent storage format will be changed so that it will be easier to transparently make changes to it without requiring further exporters/importers.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Non-blocking listeners&lt;/b&gt;&lt;br /&gt;The listener implementation will be replaced with a non-blocking implementation.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Asynchronous CacheLoader/Store&lt;/b&gt;&lt;br /&gt;Store operations will be ran in another thread to provide non blocking for main threads&lt;/li&gt;&lt;li&gt;&lt;b&gt;Improved statistics&lt;/b&gt;&lt;br /&gt;Infinispan statistics have been traditionally over-simplistic, offering mostly basic averages for writes and reads. We are going to implement percentiles on a histogram as well as recording tracing information so that you will be able to know how much time is being spent in the various subsystems (clustering, persistence, etc.)&lt;/li&gt;&lt;li&gt;&lt;b&gt;New API&lt;/b&gt;&lt;br /&gt;The current Infinispan API, based around Java's &lt;i&gt;ConcurrentHashMap&lt;/i&gt; design, does not offer the flexibility required to support modern reactive designs as well as the various extensions we've added over the years (counters, multimaps, etc). We are therefore working on a new modern API design which we will be describing with a number of blog posts in the near future.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Agroal JDBC Connection Pool&lt;/b&gt;&lt;br /&gt;We are replacing the JDBC connection pool implementation with &lt;a href="https://agroal.github.io/" target="_blank"&gt;Agroal&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Kubernetes Operators&lt;/b&gt; &lt;br /&gt;Operators are all the rage in the Kubernetes world, and we are working on an Infinispan Operator which will take care of managing and monitoring the health of an Infinispan cluster, handle scale up/scale down safely, perform upgrades and more.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Infinispan 10.0.0.Alpha1 is the first release from our development branch. It currently includes the following features on top of what is in 9.4.2.Final:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9666" target="_blank"&gt;ISPN-9666&lt;/a&gt; Agroal JDBC Connection pool&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/ISPN-9688" target="_blank"&gt;ISPN-9688&lt;/a&gt; Internal REST server modularization&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;Please report any issues in our &lt;a href="https://issues.jboss.org/browse/ISPN" target="_blank"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/" target="_blank"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/5qNDRiXAU-c" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wa1CDVCseoA" height="1" width="1" alt=""/&gt;</content><summary>Dear all, Today we are releasing 10.0.0.Alpha1 and 9.4.2.Final. Infinispan 9.4.2.Final comes with a number of bug fixes and some small additional features: ISPN-9655 REST Access Log headers ISPN-8144 &amp; ISPN-9661 Cross-Site replication statistics ISPN-9708 Expose the executor services through JMX ISPN-9732 Local iteration optimization with write behind is valid for non shared stores ISPN-9717 Fix I...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2018-11-21T08:57:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/5qNDRiXAU-c/the-road-to-infinispan-10-alpha1.html</feedburner:origLink></entry><entry><title>Red Hat Summit 2019 - Submitting all new pitfalls, storytelling, and career planning sessions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7VY1bdbPZGg/red-hat-summit-2019-submitting-pitfalls-storytelling-career-planning.html" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2019_submitting_all_new_pitfalls_storytelling_and_career_planning_sessions</id><updated>2018-11-21T10:10:42Z</updated><published>2018-11-21T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;a href="https://www.redhat.com/en/summit/2019" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="red hat summit 2018" border="0" data-original-height="449" data-original-width="1600" height="89" src="https://3.bp.blogspot.com/-GgSA_VtNlM4/W9scMmE44vI/AAAAAAAAtPg/JLVfBeaUx6Er5HdXs8biI-N1vbFNl0rsQCLcBGAs/s320/Screenshot%2B2018-11-01%2Bat%2B15.09.12.png" title="" width="320" /&gt;&lt;/a&gt;Along with the pitfalls stories, I've reached a point in my journey where I think it's time to share and make others grow in the art of storytelling. The following session has been polished over the last year at several conferences and with some internal groups at my organization.&lt;/div&gt;&lt;br /&gt;The next Red Hat Summit 2019 will be in Boston, MA from 7-9 May. The theme is expand your possibilities and should be an interesting time to expand your knowledge along with your network.&lt;br /&gt;&lt;br /&gt;The call for papers has just closed, so here's what I'm hoping to share with you in Boston.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Last year with my good friend &lt;a href="https://twitter.com/roelhodzelmans?lang=en" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;, we presented session that was pretty popular and ended up in the top 10% of all Red Hat Summit 2018.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://lh6.googleusercontent.com/8jUoCIt56yYdTz3wyzCpdtI8iG3t1a8Lc69lIARTFWE5KkNjN2GmFanN8DlqZLqNKGNM9w_e1g5NVvNBzcskdnLNNBy_bWDNuxfwkSGMYQ96zZCOP2yPLH3KCeamHnO3zO53m8Mdco0" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" height="200" src="https://lh6.googleusercontent.com/8jUoCIt56yYdTz3wyzCpdtI8iG3t1a8Lc69lIARTFWE5KkNjN2GmFanN8DlqZLqNKGNM9w_e1g5NVvNBzcskdnLNNBy_bWDNuxfwkSGMYQ96zZCOP2yPLH3KCeamHnO3zO53m8Mdco0" style="caret-color: rgb(0, 0, 0); font-family: -webkit-standard;" width="200" /&gt;&lt;/a&gt;The rest of 2018 we spent our time touring various venues, conferences, customers and partners to share the story behind &lt;i&gt;3 pitfalls everyone should avoid with hybrid multicloud&lt;/i&gt;. Attendees everywhere asked us if there were more pitfalls and we have listened.&amp;nbsp; The following sessions share more pitfalls around hybrid multicloud and microservices.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3 More Pitfalls Everyone Should Avoid with Hybrid Multicloud&lt;/h3&gt;&lt;i&gt;Back by popular demand, this session builds on the original ‘3 Pitfalls Everyone Should Avoid with Hybrid Multicloud’ and brings three new revelations from real customer experiences. From cloud, hybrid cloud, to hybrid multicloud you’ve been told it’s the path to a digitally successful future for your organization. In the first session we shared a journey through hybrid multicloud pitfalls that just scratched the surface. Let’s take another look at a few more pitfalls that are found on the road to hybrid multicloud for your business as you’re delivering applications, dealing with legacy applications and making important decisions for your cloud strategies. Join us for three more lessons learned from real life transitions into hybrid multicloud environments.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3 Pitfalls Everyone Should Avoid with Microservices&lt;/h3&gt;&lt;a href="https://2.bp.blogspot.com/-O-_mBjtmODQ/W-7UxnwOf0I/AAAAAAAAtTE/e05cMSQ8UfMqydnPwy1UxbNHYn5-4cNMgCLcBGAs/s1600/Screenshot%2B2018-11-16%2Bat%2B15.31.16.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="281" data-original-width="866" height="64" src="https://2.bp.blogspot.com/-O-_mBjtmODQ/W-7UxnwOf0I/AAAAAAAAtTE/e05cMSQ8UfMqydnPwy1UxbNHYn5-4cNMgCLcBGAs/s200/Screenshot%2B2018-11-16%2Bat%2B15.31.16.png" width="200" /&gt;&lt;/a&gt;&lt;i&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you’ve got to make don’t preclude the daily work of enhancing your customer’s experiences. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's&amp;nbsp;flexibility in the digital world. Join us for an hour of power, where real customer experiences are used to highlight the three top lessons as they transitioned their integration infrastructure into modern day microservices.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://4.bp.blogspot.com/-S5YARIkcERo/W-7VCi9dlqI/AAAAAAAAtTM/bZWYovnVqCIUkz3sd9QTFxQiFQGNeCH2wCLcBGAs/s1600/Screenshot%2B2018-11-16%2Bat%2B15.32.31.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="271" data-original-width="665" height="81" src="https://4.bp.blogspot.com/-S5YARIkcERo/W-7VCi9dlqI/AAAAAAAAtTM/bZWYovnVqCIUkz3sd9QTFxQiFQGNeCH2wCLcBGAs/s200/Screenshot%2B2018-11-16%2Bat%2B15.32.31.png" width="200" /&gt;&lt;/a&gt;Storytelling - how to build and deliver a story&lt;/h3&gt;&lt;i&gt;Storytelling is as old as time itself…. Since the beginning of humankind, we share our experiences, we teach, we inspire, we relate to stories as told all around us. They are told by elders, they are told by kids at the dinner table, they are written down in books, and they are captured on video or tape. One thing is certain, stories are being told, but what are your stories and how can you become adept at telling them?&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="https://4.bp.blogspot.com/-8knBZkobeqk/W-7VPA8sL1I/AAAAAAAAtTQ/M5vDqH5LdS8Hb18mtQ048SAQTwHOHNkigCLcBGAs/s1600/Screenshot%2B2018-11-16%2Bat%2B15.33.22.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="510" data-original-width="493" height="200" src="https://4.bp.blogspot.com/-8knBZkobeqk/W-7VPA8sL1I/AAAAAAAAtTQ/M5vDqH5LdS8Hb18mtQ048SAQTwHOHNkigCLcBGAs/s200/Screenshot%2B2018-11-16%2Bat%2B15.33.22.png" width="192" /&gt;&lt;/a&gt;Finally, I also developed a nice story with tips and ideas on how to jump start your career in open source. Much of this is not just about my journey, but about the basic elements that are key to making your dream of spending your time on an open source career instead of keeping it as a hobby.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;How To Jump Start a Career in Open Source&lt;/h3&gt;&lt;i&gt;It's not magic. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;See you all there in Boston at Red Hat Summit 2019!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=fEQ8n8ls2qo:krvTLvAtVsM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=fEQ8n8ls2qo:krvTLvAtVsM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=fEQ8n8ls2qo:krvTLvAtVsM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=fEQ8n8ls2qo:krvTLvAtVsM:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=fEQ8n8ls2qo:krvTLvAtVsM:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/fEQ8n8ls2qo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7VY1bdbPZGg" height="1" width="1" alt=""/&gt;</content><summary>Along with the pitfalls stories, I've reached a point in my journey where I think it's time to share and make others grow in the art of storytelling. The following session has been polished over the last year at several conferences and with some internal groups at my organization. The next Red Hat Summit 2019 will be in Boston, MA from 7-9 May. The theme is expand your possibilities and should be ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-11-21T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/fEQ8n8ls2qo/red-hat-summit-2019-submitting-pitfalls-storytelling-career-planning.html</feedburner:origLink></entry><entry><title>Containers without daemons: Podman and Buildah available in RHEL 7.6 and RHEL 8 Beta</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2otMHf61YGc/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Podman" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Tom Sweeney</name></author><id>searchisko:content:id:jbossorg_blog-containers_without_daemons_podman_and_buildah_available_in_rhel_7_6_and_rhel_8_beta</id><updated>2018-11-20T14:00:11Z</updated><published>2018-11-20T14:00:11Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; installations can be complex with multiple runtime dependencies and runtime engines. &lt;a href="http://cri-o.io/"&gt;CRI-O&lt;/a&gt; was created to provide a lightweight runtime for Kubernetes which adds an abstraction layer between the cluster and the runtime that allows for various OCI runtime technologies. However you still have the problem of depending on daemon(s) in your cluster for builds &amp;#8211; I.e. if you are using the cluster for builds you still need a Docker daemon.&lt;/p&gt; &lt;p&gt;Enter &lt;em&gt;Buildah.&lt;/em&gt; Buildah allows you to have a Kubernetes cluster without any Docker daemon for both runtime and builds. Excellent. But what if things go wrong? What if you want to do troubleshooting or debugging of containers in your cluster? Buildah isn’t really built for that, what you need is a client tool for working with containers and the one that comes to mind is Docker CLI &amp;#8211; but then you’re back to using the daemon.&lt;/p&gt; &lt;p&gt;This is where Podman steps in. Podman allows you to do all of the Docker commands &lt;em&gt;without the daemon dependency&lt;/em&gt;. To see examples of Podman replacing the &lt;code&gt;docker&lt;/code&gt; command, see Alessandro Arrichiello&amp;#8217;s &lt;a href="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/"&gt;Intro to Podman&lt;/a&gt; and Doug Tidwell&amp;#8217;s &lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools/"&gt;Podman—The next generation of Linux container tools&lt;/a&gt;.&lt;span id="more-535197"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;With Podman you can run, build (it calls Buildah under the covers for this), modify and troubleshoot containers in your Kubernetes cluster. With the two projects together, you have a well rounded solution for your OCI container image and container needs.&lt;/p&gt; &lt;p&gt;Buildah and Podman are easily installable via &lt;code&gt;yum install buildah podman&lt;/code&gt; on RHEL 7.6 and RHEL 8 Beta. They are also available on Fedora and most recent Linux platforms. On RHEL 7.6 make sure you enable the &lt;code&gt;rhel-7-server-extras-rpms&lt;/code&gt; repo.&lt;/p&gt; &lt;h2&gt;When to use Buildah and when to use Podman&lt;/h2&gt; &lt;p&gt;Buildah and Podman are two complementary open-source projects that  reside on GitHub: &lt;a href="https://github.com/containers/buildah"&gt;Buildah (containers/buildah)&lt;/a&gt; and &lt;a href="https://github.com/containers/libpod"&gt;Podman (containers/libpod)&lt;/a&gt;. Both Buildah and Podman are command line tools that work on OCI images and containers. The two projects are related, but differ in their specialization.&lt;/p&gt; &lt;p&gt;Buildah specializes in building OCI images. Buildah’s commands replicate all of the commands that are found in a Dockerfile. Buildah’s goal is also to provide a lower level coreutils interface to build container images, allowing people to build containers without requiring a Dockerfile. Buildah’s other goal is to allow you to use other scripting languages to build container images without requiring a daemon.&lt;/p&gt; &lt;p&gt;Podman specializes in all of the commands and functions that help you to maintain and modify those OCI container images, such as pulling and tagging. It also allows you to create, run, and maintain those containers. If you can do a command in the Docker CLI, you can do the same command in the Podman CLI. In fact you can just alias &lt;code&gt;podman&lt;/code&gt; for &lt;code&gt;docker&lt;/code&gt; on your machine and you can then build, create and maintain container images and containers without a daemon being present, just as you always have.&lt;/p&gt; &lt;p&gt;Although Podman uses Buildah’s build functionality under the covers to create a container image, the two projects have differences. The major difference between Podman and Buildah is their concept of a container. Podman allows users to create &lt;em&gt;traditional containers&lt;/em&gt; and the intent of these containers is to be controlled through the entirety of a container life cycle (pause, checkpoint/restore, etc). While Buildah containers are really created just to allow content to be added to the container &lt;em&gt;image&lt;/em&gt;. Each project has a separate internal representation of a container that is not shared. Because of this you cannot see Podman containers from within Buildah or vice versa. However the internal representation of a container image is the same between Buildah and Podman. Given this, any container image that has been created, pulled or modified by one can be seen and used by the other.&lt;/p&gt; &lt;p&gt;Some of the commands between the two projects overlap significantly but in some cases have slightly different behaviors. The following table illustrates the commands with some overlap between the projects.&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Command&lt;/th&gt; &lt;th&gt;Podman Behavior&lt;/th&gt; &lt;th&gt;Buildah Behavior&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Calls &lt;code class="highlighter-rouge"&gt;buildah bud&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Provides the build-using-dockerfile (bud) command that emulates Docker’s build command.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Commits a Podman container into a container image. Does not work on a Buildah container. Once committed the resulting image can be used by either Podman or Buildah.&lt;/td&gt; &lt;td&gt;Commits a Buildah container into a container image. Does not work on a Podman container. Once committed, the resulting image can be used by either Buildah or Podman.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Mounts a Podman container. Does not work on a Buildah container.&lt;/td&gt; &lt;td&gt;Mounts a Buildah container. Does not work on a Podman container.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Pull or push an image from a container image registry. Functionally the same as Buildah.&lt;/td&gt; &lt;td&gt;Pull or push an image from a container image registry. Functionally the same as Podman.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;run&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Run a process in a new container in the same manner as &lt;code class="highlighter-rouge"&gt;docker run&lt;/code&gt;.&lt;/td&gt; &lt;td&gt;Runs the container in the same way as the RUN command in a Dockerfile.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Removes a Podman container. Does not work on a Buildah container.&lt;/td&gt; &lt;td&gt;Removes a Buildah container. Does not work on a Podman container.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;rmi&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Equivalent on both projects.&lt;/td&gt; &lt;td&gt;Equivalent on both projects.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;containers&lt;/code&gt; and &lt;code&gt;ps&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code class="highlighter-rouge"&gt;ps&lt;/code&gt; is used to list Podman containers. The &lt;code class="highlighter-rouge"&gt;containers&lt;/code&gt; command does not exist.&lt;/td&gt; &lt;td&gt;containers is used to list Buildah containers. The &lt;code class="highlighter-rouge"&gt;ps&lt;/code&gt; command does not exist.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;A quick and easy way to summarize the difference between the two projects is the &lt;code class="highlighter-rouge"&gt;buildah run&lt;/code&gt; command emulates the RUN command in a Dockerfile while the &lt;code class="highlighter-rouge"&gt;podman run&lt;/code&gt; command emulates the &lt;code class="highlighter-rouge"&gt;docker run&lt;/code&gt; command in functionality.&lt;/p&gt; &lt;p&gt;Buildah is an efficient way to create OCI images while Podman allows you to manage and maintain those images and containers in a production environment using familiar container CLI commands. Together they form a strong foundation to support your OCI container image and container needs. Best yet, they are both Open-source projects and you are more than welcome to contribute to either or both projects. Hope to see you there!&lt;/p&gt; &lt;p&gt;An &lt;a href="https://podman.io/blogs/2018/10/31/podman-buildah-relationship.html"&gt;earlier version of this article&lt;/a&gt; appeared on the &lt;a href="https://podman.io/blogs/"&gt;podman.io blog&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Additional Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/"&gt;Intro to Podman in Red Hat Enterprise Linux 7.6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools/"&gt;Podman—The next generation of Linux container tools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/crictl-vs-podman/"&gt;CRICTL vs Podman&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html-single/building_running_and_managing_containers/"&gt;Building, running, and managing containers&lt;/a&gt; &amp;#8211; Red Hat Enterprise Linux 8 Beta documentation&lt;/li&gt; &lt;li&gt;Upstream community sites: &lt;a href="https://buildah.io/"&gt;buildah.io&lt;/a&gt; and &lt;a href="https://podman.io/"&gt;podman.io&lt;/a&gt;&lt;/li&gt; &lt;li&gt;GitHub: &lt;a href="https://github.com/containers/buildah"&gt;Buildah (containers/buildah)&lt;/a&gt; and &lt;a href="https://github.com/containers/libpod"&gt;Podman (containers/libpod)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#38;linkname=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fbuidah-podman-containers-without-daemons%2F&amp;#038;title=Containers%20without%20daemons%3A%20Podman%20and%20Buildah%20available%20in%20RHEL%207.6%20and%20RHEL%208%20Beta" data-a2a-url="https://developers.redhat.com/blog/2018/11/20/buidah-podman-containers-without-daemons/" data-a2a-title="Containers without daemons: Podman and Buildah available in RHEL 7.6 and RHEL 8 Beta"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/20/buidah-podman-containers-without-daemons/"&gt;Containers without daemons: Podman and Buildah available in RHEL 7.6 and RHEL 8 Beta&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2otMHf61YGc" height="1" width="1" alt=""/&gt;</content><summary>Kubernetes installations can be complex with multiple runtime dependencies and runtime engines. CRI-O was created to provide a lightweight runtime for Kubernetes which adds an abstraction layer between the cluster and the runtime that allows for various OCI runtime technologies. However you still have the problem of depending on daemon(s) in your cluster for builds – I.e. if you are using the clus...</summary><dc:creator>Tom Sweeney</dc:creator><dc:date>2018-11-20T14:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/20/buidah-podman-containers-without-daemons/</feedburner:origLink></entry><entry><title>Support Lifecycle for Clang/LLVM, Go, and Rust</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qpeJM3gOlOc/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="c/c++" scheme="searchisko:content:tags" /><category term="clang" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Golang" scheme="searchisko:content:tags" /><category term="lifecycle" scheme="searchisko:content:tags" /><category term="llvm" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><category term="Rust" scheme="searchisko:content:tags" /><category term="software collections" scheme="searchisko:content:tags" /><category term="Support" scheme="searchisko:content:tags" /><author><name>Bob Davis</name></author><id>searchisko:content:id:jbossorg_blog-support_lifecycle_for_clang_llvm_go_and_rust</id><updated>2018-11-20T12:00:18Z</updated><published>2018-11-20T12:00:18Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;On the heels of our recently announcement, &lt;/span&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/13/clang-llvm-6-0-go-1-10-and-rust-1-29-now-ga-for-rhel/"&gt;&lt;span style="font-weight: 400;"&gt;General Availability of Clang/LLVM 6.0, Go 1.10, and Rust 1.29&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, I want to share how we’ll be supporting them going forward. Previously, these packages had been in “&lt;/span&gt;&lt;a href="https://access.redhat.com/support/offerings/techpreview"&gt;&lt;span style="font-weight: 400;"&gt;Technology Preview&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;” status, which means that they were provided for “you to test functionality and provide feedback during the development process”, and were “not fully supported under Red Hat Subscription Level Agreements, may not be functionally complete, and are not intended for production use”. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;So now that we’ve promoted them to fully supported status, what does that mean? In the simplest terms, General Availability (GA) means that these packages have officially entered the “&lt;/span&gt;&lt;a href="https://access.redhat.com/support/policy/updates/errata/#Full_Support_Phase"&gt;&lt;span style="font-weight: 400;"&gt;Full Support Phase&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;” of their lifecycle:&lt;/span&gt;&lt;span id="more-539327"&gt;&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;During the Full Support Phase, qualified Critical and Important Security errata advisories (RHSAs) and Urgent and Selected High Priority Bug Fix errata advisories (RHBAs) may be released as they become available. Other errata advisories may be delivered as appropriate.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;If available, new or improved hardware enablement and select enhanced software functionality may be provided at the discretion of Red Hat, generally in minor releases. Hardware enablement that does not require substantial software changes may be provided independent from minor releases at Red Hat&amp;#8217;s discretion.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;Minor releases will also include available and qualified errata advisories (RHSAs, RHBAs, and RHEAs). Minor releases are cumulative and include the contents of previously released updates. The focus for minor releases during this phase lies on resolving defects of medium or higher priority.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;Updated installation images will be provided for minor releases during the Full Support Phase.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Since these packages are fast evolving, we will be supporting them on a condensed lifecycle with an update cadence that makes sense for the specific package. For Rust, this means that there will be updates every quarter (approximately every 3 months) and for LLVM and Go, this will mean updates every 6 months. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Since these packages are so quick moving, the support for them will be slightly different than what we “typically” do &amp;#8211; which is to move slowly and support specific versions of a package for a long time. In the case of LLVM, Rust, and Go Toolsets, we will be maintaining the most recently released build only. In the event that a bug or vulnerability is discovered in an older build, the path to remedy will be to update to the most recent build of that toolset. If a bug is discovered in the current build, we will work to address it in the next scheduled build. That will by default be the next scheduled minor release (Application Stream in the case of Red Hat Enterprise Linux 8).&lt;/span&gt;&lt;/p&gt; &lt;p&gt;More information about these Toolsets can be found on &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;developers.redhat.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#38;linkname=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F20%2Fsupport-lifecycle-for-clang-llvm-go-and-rust%2F&amp;#038;title=Support%20Lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust" data-a2a-url="https://developers.redhat.com/blog/2018/11/20/support-lifecycle-for-clang-llvm-go-and-rust/" data-a2a-title="Support Lifecycle for Clang/LLVM, Go, and Rust"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/20/support-lifecycle-for-clang-llvm-go-and-rust/"&gt;Support Lifecycle for Clang/LLVM, Go, and Rust&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qpeJM3gOlOc" height="1" width="1" alt=""/&gt;</content><summary>On the heels of our recently announcement, General Availability of Clang/LLVM 6.0, Go 1.10, and Rust 1.29, I want to share how we’ll be supporting them going forward. Previously, these packages had been in “Technology Preview” status, which means that they were provided for “you to test functionality and provide feedback during the development process”, and were “not fully supported under Red Hat ...</summary><dc:creator>Bob Davis</dc:creator><dc:date>2018-11-20T12:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/20/support-lifecycle-for-clang-llvm-go-and-rust/</feedburner:origLink></entry><entry><title>Quick start Infinispan on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0h7Abt_kpY4/quick-start-infinispan-on-kubernetes.html" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="minikube" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-quick_start_infinispan_on_kubernetes</id><updated>2018-11-19T12:14:56Z</updated><published>2018-11-19T12:14:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Last week we showed you &lt;a href="https://blog.infinispan.org/2018/11/the-fastest-path-to-running-infinispan.html"&gt;how to easily run Infinispan on top of OpenShift&lt;/a&gt;. This week we're trying to do the same on Minikube, a tool that makes it easy to run vanilla Kubernetes locally.&lt;br /&gt;&lt;br /&gt;Although we've already covered the topic in the &lt;a href="https://blog.infinispan.org/2016/08/running-infinispan-cluster-on-kubernetes.html"&gt;past&lt;/a&gt;, we felt the descriptors needed a permanent location and an update to the latest Infinispan releases. Detailed instructions can be found in &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes"&gt;this repository&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;With OpenShift, we took advantage of &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/templates.html"&gt;Templates&lt;/a&gt; which allow a set of objects to be parameterised.&lt;br /&gt;Templates are OpenShift specific, so Kubernetes does not understand them. Instead, we provide you with the individual descriptors required to run Infinispan (Helm chart to come...). This includes:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/statefulset.yaml"&gt;stateful set&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Two services, for &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/service-hotrod.yaml"&gt;Hot Rod&lt;/a&gt; and &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/service-http.yaml"&gt;HTTP REST&lt;/a&gt;&amp;nbsp;endpoints)&lt;/li&gt;&lt;li&gt;A &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/rolebinding.yaml"&gt;rolebinding&lt;/a&gt;&amp;nbsp;so that Kubernetes API can be queried when forming a cluster.&lt;/li&gt;&lt;li&gt;A &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/secret.yaml"&gt;secret&lt;/a&gt; for plain authentication.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Before applying the descriptors, download and install &lt;a href="https://kubernetes.io/docs/setup/minikube/"&gt;Minikube&lt;/a&gt;. Then, set a profile, select the VM driver, give it enough CPU and memory for your experiments, and start it.&lt;br /&gt;&lt;br /&gt;Once Minikube it's running and you have the corresponding &lt;span style="font-family: Courier New, Courier, monospace;"&gt;kubectl&lt;/span&gt; command line tool installed, simply call:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ kubectl apply -f .&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Once all pods are ready, you should verify the 3-node cluster has formed correctly (find out how in the &lt;a href="https://github.com/infinispan-demos/infinispan-kubernetes/blob/master/README.md"&gt;README&lt;/a&gt; file).&lt;br /&gt;&lt;br /&gt;When ready, you can start storing and retrieving data. The HTTP REST endpoint is particularly useful for these initial tests, to verify everything works as expected:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ kubectl exec \&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; -it infinispan-server-0 \&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; -- curl -v -u test:changeme -H 'Content-type: text/plain' -d 'test' infinispan-server-http:8080/rest/default/stuff&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;$&lt;/span&gt;&lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;kubectl exec -it infinispan-server-1 \&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; -- curl -v -u test:changeme infinispan-server-http:8080/rest/default/stuff&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Go and try it out and let us know what you think. You can find us on &lt;a href="https://infinispan.zulipchat.com/"&gt;this Zulip chat&lt;/a&gt; :)&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Galder&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/KhpT8bOEiLM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0h7Abt_kpY4" height="1" width="1" alt=""/&gt;</content><summary>Last week we showed you how to easily run Infinispan on top of OpenShift. This week we're trying to do the same on Minikube, a tool that makes it easy to run vanilla Kubernetes locally. Although we've already covered the topic in the past, we felt the descriptors needed a permanent location and an update to the latest Infinispan releases. Detailed instructions can be found in this repository. With...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2018-11-19T12:14:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/KhpT8bOEiLM/quick-start-infinispan-on-kubernetes.html</feedburner:origLink></entry><entry><title>Quickly try Red Hat Decision Manager in your Cloud</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/S_AzAUVpbBo/" /><category term="Business Rules" scheme="searchisko:content:tags" /><category term="CDK" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Demo" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="how-to" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss BRMS" scheme="searchisko:content:tags" /><category term="minishift" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Decision Manager" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-quickly_try_red_hat_decision_manager_in_your_cloud</id><updated>2018-11-19T12:00:50Z</updated><published>2018-11-19T12:00:50Z</published><content type="html">&lt;p&gt;It&amp;#8217;s been some time since I last talked with you about business logic engines and using them in application development cloud architectures. At that time, I showcased &lt;a href="http://www.schabell.org/2016/12/appdev-cloud-howto-run-jboss-brms-in-container.html"&gt;running JBoss BRMS in a container&lt;/a&gt; on &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;. This gives you the cloud experience, one that&amp;#8217;s portable across private and public clouds, but on your own local laptop using &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The world continues to move forward, a new product has been released which replaced JBoss BRMS with the &lt;a href="https://developers.redhat.com/products/red-hat-decision-manager/overview/"&gt;Red Hat Decision Manager&lt;/a&gt;, so now I want to provide a way for you to install this on OpenShift, in the same easy to use demo format.&lt;/p&gt; &lt;p&gt;&lt;span id="more-535517"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Red Hat Decision Manager easy installation on OpenShift&lt;/h3&gt; &lt;div id="attachment_535537" style="width: 310px" class="wp-caption alignright"&gt;&lt;img class="wp-image-535537 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-ocp-console-300x171.png" alt="red hat decision manager" width="300" height="171" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-ocp-console-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-ocp-console-768x438.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-ocp-console-1024x584.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p class="wp-caption-text"&gt;Log in for Red Hat Decision Manager on OpenShift Container Platform&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Below is the outline from the easy installation project, a demo that gets you started in the fastest possible way. The goal here&amp;#8217;s to get you up and running, with a standard configuration to start your first business rules project.&lt;/p&gt; &lt;p&gt;This section takes you through the simple to install example project that delivers a fully operational, fresh out of the box installation of Red Hat Decision Manager. Not only that, it&amp;#8217;s a containerized installation that&amp;#8217;s created on your OpenShift installation!&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;First ensure you have an OpenShift container based installation, such as one of the following installed first:&lt;/p&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;My OCP Install Demo&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;or your own OpenShift installation such as &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt; or minishift.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhdm-install-demo/-/archive/master/rhcs-rhdm-install-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;Add products to installs directory.&lt;/p&gt; &lt;div id="attachment_535547" style="width: 310px" class="wp-caption alignright"&gt;&lt;img class="size-medium wp-image-535547" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-build-ocp-300x153.png" alt="red hat decision manager" width="300" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-build-ocp-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-build-ocp-768x392.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-build-ocp-1024x522.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-build-ocp.png 1139w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p class="wp-caption-text"&gt;Watch the container building live on OpenShift Container Platform&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ol&gt; &lt;div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;init.sh&lt;/code&gt; or &lt;code&gt;init.bat&lt;/code&gt; file.  Note: &lt;code&gt;init.bat&lt;/code&gt; must be run with Administrative privileges:&lt;/p&gt; &lt;/div&gt; &lt;pre&gt;# The installation needs to be pointed to a running version # of OpenShift, so pass an IP address such as: # $ ./init.sh 192.168.99.100 # example for OCP. $ ./init.sh 10.1.2.2 # example for CDK.&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div&gt; &lt;p&gt;Now log in to Red Hat Decision Manager and start developing containerized rules projects (the address will be generated by the init script).&lt;/p&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt; &lt;div&gt; &lt;p&gt;OCP example: &lt;code&gt;http://rhcs-rhdm-install-demo-appdev-in-cloud.192.168.99.100.nip.io/decision-central&lt;/code&gt;   (username: erics / password: redhatdm1!)&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Be sure to give the container time to not only start up, but also time to start up the embedded &lt;a href="https://developers.redhat.com/products/eap/overview/"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) with Red Hat Decision Manager. You can check this by finding the deployed pod in the OpenShift console and looking into the logs tab.&lt;/p&gt; &lt;div id="attachment_535557" style="width: 310px" class="wp-caption alignright"&gt;&lt;img class="size-medium wp-image-535557" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-pod-ocp-300x137.png" alt="red hat decision manager" width="300" height="137" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-pod-ocp-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-pod-ocp-768x351.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhdm-pod-ocp-1024x467.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p class="wp-caption-text"&gt;The container instance of Red Hat Decision Manager on OpenShift Container Platform&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That&amp;#8217;s it, you are now able to start developing business logic and events at your leisure.&lt;/p&gt; &lt;p&gt;Stay tuned for more by watching for updates here or following the projects at &lt;a href="https://gitlab.com/redhatdemocentral"&gt;Red Hat Demo Central&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#38;linkname=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F19%2Ftry-red-hat-decision-openshift%2F&amp;#038;title=Quickly%20try%20Red%20Hat%20Decision%20Manager%20in%20your%20Cloud" data-a2a-url="https://developers.redhat.com/blog/2018/11/19/try-red-hat-decision-openshift/" data-a2a-title="Quickly try Red Hat Decision Manager in your Cloud"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/19/try-red-hat-decision-openshift/"&gt;Quickly try Red Hat Decision Manager in your Cloud&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/S_AzAUVpbBo" height="1" width="1" alt=""/&gt;</content><summary>It’s been some time since I last talked with you about business logic engines and using them in application development cloud architectures. At that time, I showcased running JBoss BRMS in a container on Red Hat OpenShift. This gives you the cloud experience, one that’s portable across private and public clouds, but on your own local laptop using Red Hat Container Development Kit. The world contin...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-11-19T12:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/19/try-red-hat-decision-openshift/</feedburner:origLink></entry></feed>
